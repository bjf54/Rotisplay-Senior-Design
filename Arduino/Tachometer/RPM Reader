// ECE 1896 Senior Design
// Team 5 - Rotisplay
// This program uses a hall effect sensor to read the RPM of a magnet rotating around the device

// Set digital pin 2 as the hall pin
int sensorPin = A0;

// Set number of rotation trips for RPM reading (higher improves accuracy)
float rotationThresh = 20.0;

void setup() 
{
  // Initialize serial communication at 9600 bits per second
  Serial.begin(9600);

  // Make the hall pin an input
  pinMode(sensorPin, INPUT);
}

void loop() 
{
  // Preallocate values for tachometer
  float rotationCount = 1.0;
  bool onState = false;
  float startTime = 0;;
  bool startCountTime = true;

  // Count the number of times the hall sensor is tripped,
  // but without double counting during the same trip
  while(true)
  { 
    float sensorValue = analogRead(sensorPin);

    // The Hall Effect sensor reads LOW when a magnet is within range
    if(sensorValue <= 200)
    {
      // if first loop, start counting time
      if (startCountTime == true)
      {
        startTime = micros();
        startCountTime = false;
        Serial.println("START TIME");
      }
      
      if(onState == false)
      {
        onState = true;
        rotationCount += 1.0;
        
        Serial.print("PASS ");
        Serial.print(rotationCount);
        Serial.println("");
      }
    }

    // Reset onState to false when the sensor is out of range
    else
    {
      onState = false;
    }

    // Break once the magnet has gone around enough times
    if (rotationCount >= rotationThresh)
    {
      break;
    }

    delay(50);
  }
 
  // Calculate time passed for rotation
  float endTime = micros();
  float timePassed = ((endTime - startTime)/1000000.0);

  // Print information about time passed
  Serial.print("Time Passed: ");
  Serial.print(timePassed);
  Serial.print(" s, ");

  // Calculate the RPM value
  float rpmValue = (rotationCount / timePassed) * 60.0;

  // Print information about the RPM
  Serial.print("RPM: ");
  Serial.print(rpmValue);
  Serial.println("");

  // Delay in between reads for stability
  delay(1000);
}
